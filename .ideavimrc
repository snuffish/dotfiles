" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc
" Enable IdeaVim plugins https://jb.gg/ideavim-plugins

" Find VimActions in IDE Editor
":action VimFindActionIdAction

" Set leader key to space
let mapleader = ' '

" Show all other Vim actions in WhichKey
let g:WhichKey_ShowVimActions = "false"
"nmap <KEYBIND> <Action>(VimFindActionIdAction)


""""""""""""""""""""""""Handlers"""""""""""""""""""""""
"sethandler <C-C> n-v:ide i:vim

""""""""""""""""""""""""Plugins""""""""""""""""""""""""
Plug 'machakann/vim-highlightedyank'
Plug 'tpope/vim-commentary'
Plug 'preservim/nerdtree'
Plug 'tpope/vim-surround'
Plug 'justinmk/vim-sneak'
"Plug 'vim-matchit'

set which-key
set mini-ai
"set easymotion
set sneak
set peekaboo
set functiontextobj
"set matchit

set number relativenumber
set scrolloff=5
set incsearch
set notimeout

""""""""""""""""""""""""Remaps"""""""""""""""""""""""""
map K 5kzz
map J 5jzz
map L <Action>(NextTab)
map H <Action>(PreviousTab)

imap <C-l> <Right>
imap <C-k> <Up>
imap <C-j> <Down>
imap <C-h> <Left>

inoremap <C-e> <End>
inoremap <C-a> <Home>

nnoremap x "_x
nnoremap X "_X

nnoremap Y y$
nnoremap y0 mzy^`zh
nnoremap c0 "_cg^
nnoremap d0 "_dg^

nnoremap <PageDown> <C-d>zz
nnoremap <PageUp> <C-u>zz
nnoremap } }zz
nnoremap { {zz
nnoremap ( (zz
nnoremap ) )zz
nnoremap n nzzzv
nnoremap N Nzzzv
map gg gg_

nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

nnoremap q <nop>
nnoremap <C-q> q

map m %
map M V%

let g:WhichKeyDesc_selectAll = "vag Select whole buffer"
map vag GVgg

"""""""""""""""""""""""Sections""""""""""""""""""""""""
let g:WhichKeyDesc_goto = "g Goto"
let g:WhichKeyDesc_code = "<leader>c Code"
let g:WhichKeyDesc_new = "<leader>n New"
let g:WhichKeyDesc_run = "<leader>r Run"
let g:WhichKeyDesc_debug = "<leader>d Debug"
let g:WhichKeyDesc_search = "<leader>s Search"
let g:WhichKeyDesc_files = "<leader>f Files"
let g:WhichKeyDesc_multiply = "gm Multiply operator"

"""""""""""""""""""""""Mappings""""""""""""""""""""""""
let g:WhichKeyDesc_reload = "<leader>R Reload vimrc"
map <leader>R <Action>(IdeaVim.ReloadVimRc.reload)

let g:WhichKeyDesc_multiplyline = "gmm Multiply line"
map gmm yyp

"map ` <Plug>(acejump-linemarks)
map ` <Action>(AceTargetAction)

let g:WhichKeyDesc_gotofile = "<leader><leader> GotoFile"
map <leader>/ <Action>(FindInPath)
map <leader><leader> <Action>(GotoFile)
map <leader>fr <Action>(RecentFiles)
map <leader>sa <Action>(GotoAction)
map <leader>ss <Action>(GotoSymbol)
"map <leader>cr <Action>(RenameFile)


let g:WhichKeyDesc_zenmode = "<leader>z ZenMode"
map <leader>z <Action>(ToggleDistractionFreeMode)

nnoremap <S-CR> a<CR><Esc>k$

"Search for the cursors <cword>
map g/ :normal! viw<CR><Action>(FindInPath)

""""""""""""""""""""""""Fuzzy""""""""""""""""""""""""""
map <leader>ff <Action>(com.mituuz.fuzzier.Fuzzier)
map <leader>gf <Action>(com.mituuz.fuzzier.FuzzierVCS)
map <leader>mf <Action>(com.mituuz.fuzzier.FuzzyMover)

"""""""""""""""""""""""""LSP"""""""""""""""""""""""""""
map gr <Action>(ShowUsages)
map gi <Action>(GotoImplementation)
map gD <Action>(GotoTypeDeclaration)
map gt <Action>(CallHierarchy)
map <leader>cf <Action>(ReformatCode)

""""""""""""""""""""""""Code"""""""""""""""""""""""""""
map <leader>ng <Action>(Generate)
map <leader>ns <Action>(NewScratchBuffer)
map <leader>cr <Action>(RenameElement)

if has('ide') && &ide =~? 'webstorm'
    map <leader>nc <Action>(NewFile)
elseif has('ide') && &ide =~? 'clion'
    map <leader>nc <Action>(CIDR.Lang.Cpp.NewClass)
else
    map <leader>nc <Action>(NewClass)
endif

map <leader>sw <Action>(SurroundWith)

let g:WhichKeyDesc_optimizeImports = "<leader>co OptimizeImports"
map <leader>co <Action>(OptimizeImports)

map <A-j> <Action>(MoveStatementDown)
map <A-k> <Action>(MoveStatementUp)

let g:WhichKeyDesc_outline = "<leader>o Outline"
map <leader>o <Action>(FileStructurePopup)
map <leader>O <Action>(ActivateStructureToolWindow)


map <leader>h <Action>(Vcs.ShowTabbedFileHistory)

"""""""""""""""""""""""Window""""""""""""""""""""""""""
nmap <C-w><C-q> <Action>(CloseContent)
nmap ZQ <Action>(CloseContent)
nmap <leader>ai <Action>(ActivateAIAssistantToolWindow)
nmap <leader>aj <Action>(ActivateElectroJunToolWindowToolWindow)

nmap ZZ <Action>(CloseAllEditorsButActive)
nmap ZL <Action>(CloseAllToTheRight)
nmap ZH <Action>(CloseAllToTheLeft)

nmap <leader>x <Action>(ActivateProblemsViewToolWindow)
"nmap <A-l> <C-W>l
"nmap <A-k> <C-W>k
"nmap <A-j> <C-W>j
"nmap <A-h> <C-W>h

""""""""""""""""""""""Terminal"""""""""""""""""""""""""
map <C-/> <Action>(ActivateTerminalToolWindow)

""""""""""""""""""""""Debug/Run""""""""""""""""""""""""
map <leader>rr <Action>(Run)

"map <leader>rd <Action>(Debug)
map <leader>rd <Action>(target-platformio-upload-monitor)

map <leader>dq <Action>(Stop)

map <leader>db <Action>(ToggleLineBreakpoint)
map <leader>de <Action>(EvaluateExpression)
map <leader>dd <Action>(ViewBreakpoints)

nmap <C-j> <Action>(StepOver)
nmap <C-k> <Action>(Resume)
nmap <C-h> <Action>(StepOut)
nmap <C-l> <Action>(ForceStepInto)

""""""""""""""""""""""Navigation"""""""""""""""""""""""
map s <Action>(flash.search)

let g:WhichKeyDesc_nerdtree = "<leader>e NerdTree"
map <leader>e :NERDTree<CR>
